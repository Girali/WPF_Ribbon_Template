<ControlTemplate TargetType="RibbonComboBox" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mwt="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic">
  <Border Name="MainBorder">
    <Grid Margin="1,0,1,0" SnapsToDevicePixels="True">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="Auto" Name="OuterTextColumn" />
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>
      <Image Source="{TemplateBinding RibbonControlService.LargeImageSource}" Name="Image" Width="32" Height="32" Margin="1,1,1,1" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="Center" RenderOptions.BitmapScalingMode="NearestNeighbor" Grid.Column="1" Grid.Row="0" />
      <Grid Name="Grid" Margin="1,1,1,1" HorizontalAlignment="Center" VerticalAlignment="Top" Grid.Column="1" Grid.Row="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="Auto" Name="TextColumn" />
        </Grid.ColumnDefinitions>
        <Grid Name="TwoLineTextPanel" HorizontalAlignment="Center" VerticalAlignment="Center">
          <RibbonTwoLineText TextAlignment="Center" LineHeight="13" LineStackingStrategy="BlockLineHeight" Text="{TemplateBinding RibbonControlService.Label}" Name="TwoLineText" Margin="2,0,2,0" />
          <Rectangle Stroke="#FF000000" StrokeThickness="1" StrokeDashArray="1 2" Name="FocusVisual" Margin="1,1,1,1" Visibility="Collapsed" />
        </Grid>
        <Border BorderThickness="{TemplateBinding Border.BorderThickness}" BorderBrush="{TemplateBinding Border.BorderBrush}" Background="{TemplateBinding Panel.Background}" Name="Border" Height="20" Grid.Column="1" Grid.ColumnSpan="2" />
        <Grid Height="20" Grid.Column="1" Grid.IsSharedSizeScope="True">
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" SharedSizeGroup="ToggleButtonGroup" />
          </Grid.ColumnDefinitions>
          <Grid Width="{TemplateBinding RibbonComboBox.SelectionBoxWidth}" Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" IsHitTestVisible="False">
            <ContentPresenter Content="{TemplateBinding RibbonComboBox.SelectionBoxItem}" ContentTemplate="{TemplateBinding RibbonComboBox.SelectionBoxItemTemplate}" ContentStringFormat="{TemplateBinding RibbonComboBox.SelectionBoxItemStringFormat}" Name="PART_ContentHost" Margin="2,0,2,0" />
          </Grid>
          <RibbonToggleButton PressedBorderBrush="{TemplateBinding RibbonControlService.PressedBorderBrush}" PressedBackground="{TemplateBinding RibbonControlService.PressedBackground}" CheckedBackground="{TemplateBinding RibbonControlService.PressedBackground}" CheckedBorderBrush="{TemplateBinding RibbonControlService.PressedBorderBrush}" IsChecked="False" BorderBrush="#00FFFFFF" BorderThickness="{TemplateBinding Border.BorderThickness}" Background="#00FFFFFF" Name="PART_ToggleButton" Grid.ColumnSpan="2">
            <RibbonToggleButton.Style>
              <Style TargetType="RibbonToggleButton">
                <Style.Resources>
                  <ResourceDictionary />
                </Style.Resources>
                <Setter Property="RibbonControlService.MouseOverBorderBrush">
                  <Setter.Value>
                    <Binding Path="Ribbon.MouseOverBorderBrush" RelativeSource="{RelativeSource Mode=Self}" />
                  </Setter.Value>
                </Setter>
                <Setter Property="RibbonControlService.MouseOverBackground">
                  <Setter.Value>
                    <Binding Path="Ribbon.MouseOverBackground" RelativeSource="{RelativeSource Mode=Self}" />
                  </Setter.Value>
                </Setter>
                <Setter Property="RibbonControlService.PressedBorderBrush">
                  <Setter.Value>
                    <Binding Path="Ribbon.PressedBorderBrush" RelativeSource="{RelativeSource Mode=Self}" />
                  </Setter.Value>
                </Setter>
                <Setter Property="RibbonControlService.PressedBackground">
                  <Setter.Value>
                    <Binding Path="Ribbon.PressedBackground" RelativeSource="{RelativeSource Mode=Self}" />
                  </Setter.Value>
                </Setter>
                <Setter Property="RibbonControlService.CheckedBorderBrush">
                  <Setter.Value>
                    <Binding Path="Ribbon.CheckedBorderBrush" RelativeSource="{RelativeSource Mode=Self}" />
                  </Setter.Value>
                </Setter>
                <Setter Property="RibbonControlService.CheckedBackground">
                  <Setter.Value>
                    <Binding Path="Ribbon.CheckedBackground" RelativeSource="{RelativeSource Mode=Self}" />
                  </Setter.Value>
                </Setter>
                <Setter Property="RibbonControlService.FocusedBorderBrush">
                  <Setter.Value>
                    <Binding Path="Ribbon.FocusedBorderBrush" RelativeSource="{RelativeSource Mode=Self}" />
                  </Setter.Value>
                </Setter>
                <Setter Property="RibbonControlService.FocusedBackground">
                  <Setter.Value>
                    <Binding Path="Ribbon.FocusedBackground" RelativeSource="{RelativeSource Mode=Self}" />
                  </Setter.Value>
                </Setter>
                <Setter Property="ButtonBase.ClickMode">
                  <Setter.Value>
                    <x:Static Member="ClickMode.Press" />
                  </Setter.Value>
                </Setter>
                <Setter Property="Border.BorderThickness">
                  <Setter.Value>
                    <Thickness>1,1,1,1</Thickness>
                  </Setter.Value>
                </Setter>
                <Setter Property="Control.Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="RibbonToggleButton">
                      <Grid Background="#00FFFFFF">
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition Width="*" />
                          <ColumnDefinition Width="Auto" SharedSizeGroup="ToggleButtonGroup" />
                        </Grid.ColumnDefinitions>
                        <Border BorderThickness="{TemplateBinding Border.BorderThickness}" BorderBrush="{TemplateBinding Border.BorderBrush}" Background="{TemplateBinding Panel.Background}" Name="OuterBorder" Width="14" SnapsToDevicePixels="True" Grid.Column="1">
                          <Border BorderThickness="1,1,1,1" BorderBrush="#00FFFFFF" Background="#00FFFFFF" Name="InnerBorder" SnapsToDevicePixels="True">
                            <Path Data="M0,0L2.5,3 5,0z" Fill="{TemplateBinding TextElement.Foreground}" Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" />
                          </Border>
                        </Border>
                      </Grid>
                      <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver">
                          <Setter Property="Panel.Background" TargetName="OuterBorder">
                            <Setter.Value>
                              <Binding Path="MouseOverBackground" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                            </Setter.Value>
                          </Setter>
                          <Setter Property="Border.BorderBrush" TargetName="OuterBorder">
                            <Setter.Value>
                              <Binding Path="MouseOverBorderBrush" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                            </Setter.Value>
                          </Setter>
                          <Setter Property="Border.BorderBrush" TargetName="InnerBorder">
                            <Setter.Value>
                              <SolidColorBrush>#80FFFFFF</SolidColorBrush>
                            </Setter.Value>
                          </Setter>
                          <Trigger.Value>
                            <s:Boolean>True</s:Boolean>
                          </Trigger.Value>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused">
                          <Setter Property="Panel.Background" TargetName="OuterBorder">
                            <Setter.Value>
                              <Binding Path="FocusedBackground" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                            </Setter.Value>
                          </Setter>
                          <Setter Property="Border.BorderBrush" TargetName="OuterBorder">
                            <Setter.Value>
                              <Binding Path="FocusedBorderBrush" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                            </Setter.Value>
                          </Setter>
                          <Setter Property="Border.BorderBrush" TargetName="InnerBorder">
                            <Setter.Value>
                              <SolidColorBrush>#80FFFFFF</SolidColorBrush>
                            </Setter.Value>
                          </Setter>
                          <Trigger.Value>
                            <s:Boolean>True</s:Boolean>
                          </Trigger.Value>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked">
                          <Setter Property="Panel.Background" TargetName="OuterBorder">
                            <Setter.Value>
                              <Binding Path="CheckedBackground" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                            </Setter.Value>
                          </Setter>
                          <Setter Property="Border.BorderBrush" TargetName="OuterBorder">
                            <Setter.Value>
                              <Binding Path="CheckedBorderBrush" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                            </Setter.Value>
                          </Setter>
                          <Setter Property="Border.BorderBrush" TargetName="InnerBorder">
                            <Setter.Value>
                              <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <LinearGradientBrush.GradientStops>
                                  <GradientStop Color="#FFE7CBAD" Offset="0" />
                                  <GradientStop Color="#FFF7D7B5" Offset="0.1" />
                                  <GradientStop Color="#FFFFD38C" Offset="0.36" />
                                  <GradientStop Color="#FFFFC75A" Offset="0.36" />
                                  <GradientStop Color="#FFFFEFA5" Offset="1" />
                                </LinearGradientBrush.GradientStops>
                              </LinearGradientBrush>
                            </Setter.Value>
                          </Setter>
                          <Trigger.Value>
                            <s:Boolean>True</s:Boolean>
                          </Trigger.Value>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed">
                          <Setter Property="Panel.Background" TargetName="OuterBorder">
                            <Setter.Value>
                              <Binding Path="PressedBackground" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                            </Setter.Value>
                          </Setter>
                          <Setter Property="Border.BorderBrush" TargetName="OuterBorder">
                            <Setter.Value>
                              <Binding Path="PressedBorderBrush" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                            </Setter.Value>
                          </Setter>
                          <Setter Property="Border.BorderBrush" TargetName="InnerBorder">
                            <Setter.Value>
                              <SolidColorBrush>#00FFFFFF</SolidColorBrush>
                            </Setter.Value>
                          </Setter>
                          <Trigger.Value>
                            <s:Boolean>True</s:Boolean>
                          </Trigger.Value>
                        </Trigger>
                        <MultiDataTrigger>
                          <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=Self}}" Value="True" />
                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                          </MultiDataTrigger.Conditions>
                          <Setter Property="Panel.Background" TargetName="OuterBorder">
                            <Setter.Value>
                              <DynamicResource ResourceKey="{x:Static SystemColors.HighlightBrushKey}" />
                            </Setter.Value>
                          </Setter>
                          <Setter Property="Border.BorderBrush" TargetName="OuterBorder">
                            <Setter.Value>
                              <DynamicResource ResourceKey="{x:Static SystemColors.ControlBrushKey}" />
                            </Setter.Value>
                          </Setter>
                          <Setter Property="Border.BorderBrush" TargetName="InnerBorder">
                            <Setter.Value>
                              <SolidColorBrush>#00FFFFFF</SolidColorBrush>
                            </Setter.Value>
                          </Setter>
                          <Setter Property="Shape.Fill" TargetName="Arrow">
                            <Setter.Value>
                              <DynamicResource ResourceKey="{x:Static SystemColors.HighlightTextBrushKey}" />
                            </Setter.Value>
                          </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                          <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Mode=Self}}" Value="True" />
                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                          </MultiDataTrigger.Conditions>
                          <Setter Property="Panel.Background" TargetName="OuterBorder">
                            <Setter.Value>
                              <DynamicResource ResourceKey="{x:Static SystemColors.HighlightBrushKey}" />
                            </Setter.Value>
                          </Setter>
                          <Setter Property="Border.BorderBrush" TargetName="OuterBorder">
                            <Setter.Value>
                              <DynamicResource ResourceKey="{x:Static SystemColors.ControlBrushKey}" />
                            </Setter.Value>
                          </Setter>
                          <Setter Property="Shape.Fill" TargetName="Arrow">
                            <Setter.Value>
                              <DynamicResource ResourceKey="{x:Static SystemColors.HighlightTextBrushKey}" />
                            </Setter.Value>
                          </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                          <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True" />
                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                          </MultiDataTrigger.Conditions>
                          <Setter Property="Panel.Background" TargetName="OuterBorder">
                            <Setter.Value>
                              <DynamicResource ResourceKey="{x:Static SystemColors.HighlightBrushKey}" />
                            </Setter.Value>
                          </Setter>
                          <Setter Property="Border.BorderBrush" TargetName="OuterBorder">
                            <Setter.Value>
                              <DynamicResource ResourceKey="{x:Static SystemColors.ControlLightBrushKey}" />
                            </Setter.Value>
                          </Setter>
                          <Setter Property="Border.BorderBrush" TargetName="InnerBorder">
                            <Setter.Value>
                              <SolidColorBrush>#00FFFFFF</SolidColorBrush>
                            </Setter.Value>
                          </Setter>
                          <Setter Property="Shape.Fill" TargetName="Arrow">
                            <Setter.Value>
                              <DynamicResource ResourceKey="{x:Static SystemColors.HighlightTextBrushKey}" />
                            </Setter.Value>
                          </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                          <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource Mode=Self}}" Value="True" />
                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                          </MultiDataTrigger.Conditions>
                          <Setter Property="Panel.Background" TargetName="OuterBorder">
                            <Setter.Value>
                              <DynamicResource ResourceKey="{x:Static SystemColors.HighlightBrushKey}" />
                            </Setter.Value>
                          </Setter>
                          <Setter Property="Border.BorderBrush" TargetName="OuterBorder">
                            <Setter.Value>
                              <DynamicResource ResourceKey="{x:Static SystemColors.ControlLightBrushKey}" />
                            </Setter.Value>
                          </Setter>
                          <Setter Property="Border.BorderBrush" TargetName="InnerBorder">
                            <Setter.Value>
                              <SolidColorBrush>#00FFFFFF</SolidColorBrush>
                            </Setter.Value>
                          </Setter>
                          <Setter Property="Shape.Fill" TargetName="Arrow">
                            <Setter.Value>
                              <DynamicResource ResourceKey="{x:Static SystemColors.HighlightTextBrushKey}" />
                            </Setter.Value>
                          </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                          <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True" />
                            <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=Self}}" Value="True" />
                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                          </MultiDataTrigger.Conditions>
                          <Setter Property="Border.BorderBrush" TargetName="OuterBorder">
                            <Setter.Value>
                              <DynamicResource ResourceKey="{x:Static SystemColors.HighlightBrushKey}" />
                            </Setter.Value>
                          </Setter>
                        </MultiDataTrigger>
                      </ControlTemplate.Triggers>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </RibbonToggleButton.Style>
          </RibbonToggleButton>
        </Grid>
      </Grid>
      <Popup IsOpen="False" Placement="Bottom" HorizontalOffset="1" VerticalOffset="-1" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" AllowsTransparency="True" Name="PART_Popup" Focusable="False">
        <mwt:SystemDropShadowChrome Color="#00FFFFFF" Name="Shadow" MinWidth="0" RenderOptions.ClearTypeHint="Enabled" KeyTipService.IsKeyTipScope="True">
          <Border BorderThickness="{TemplateBinding Border.BorderThickness}" CornerRadius="2,2,2,2" BorderBrush="{x:Null}" Background="{x:Null}" Name="MenuBorder">
            <Border CornerRadius="2,2,2,2" Background="#F0FFFFFF" Name="SubMenuInnerBorder">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ItemsPresenter Name="ItemsPresenter" Margin="1,1,1,1" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.Row="1" Grid.IsSharedSizeScope="True" />
                <Border BorderThickness="0,1,0,0" BorderBrush="{x:Null}" Background="#FFE5EFF9" Name="ResizeControl" Visibility="Collapsed" Grid.Row="2">
                  <Thumb Name="PART_ResizeThumb">
                    <Thumb.Style>
                      <Style TargetType="Thumb">
                        <Style.Triggers>
                          <Trigger Property="FrameworkElement.FlowDirection">
                            <Setter Property="FrameworkElement.Cursor">
                              <Setter.Value>
                                <Cursor>SizeNESW</Cursor>
                              </Setter.Value>
                            </Setter>
                            <Trigger.Value>
                              <x:Static Member="FlowDirection.RightToLeft" />
                            </Trigger.Value>
                          </Trigger>
                        </Style.Triggers>
                        <Style.Resources>
                          <ResourceDictionary />
                        </Style.Resources>
                        <Setter Property="FrameworkElement.Width">
                          <Setter.Value>
                            <s:Double>11</s:Double>
                          </Setter.Value>
                        </Setter>
                        <Setter Property="FrameworkElement.Height">
                          <Setter.Value>
                            <s:Double>11</s:Double>
                          </Setter.Value>
                        </Setter>
                        <Setter Property="FrameworkElement.VerticalAlignment">
                          <Setter.Value>
                            <x:Static Member="VerticalAlignment.Bottom" />
                          </Setter.Value>
                        </Setter>
                        <Setter Property="FrameworkElement.HorizontalAlignment">
                          <Setter.Value>
                            <x:Static Member="HorizontalAlignment.Right" />
                          </Setter.Value>
                        </Setter>
                        <Setter Property="FrameworkElement.Cursor">
                          <Setter.Value>
                            <Cursor>SizeNWSE</Cursor>
                          </Setter.Value>
                        </Setter>
                        <Setter Property="Control.Template">
                          <Setter.Value>
                            <ControlTemplate TargetType="Thumb">
                              <Border Background="#00FFFFFF">
                                <Path Data="M9,0L11,0 11,11 0,11 0,9 3,9 3,6 6,6 6,3 9,3z" Margin="0,0,2,2">
                                  <Path.Fill>
                                    <DrawingBrush ViewportUnits="Absolute" ViewboxUnits="Absolute" Viewport="0,0,3,3" Viewbox="0,0,3,3" TileMode="Tile">
                                      <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                          <DrawingGroup.Children>
                                            <GeometryDrawing Brush="#FF6C747D" Geometry="M0,0L2,0 2,2 0,2z" />
                                          </DrawingGroup.Children>
                                        </DrawingGroup>
                                      </DrawingBrush.Drawing>
                                    </DrawingBrush>
                                  </Path.Fill>
                                </Path>
                              </Border>
                            </ControlTemplate>
                          </Setter.Value>
                        </Setter>
                      </Style>
                    </Thumb.Style>
                  </Thumb>
                </Border>
              </Grid>
            </Border>
          </Border>
        </mwt:SystemDropShadowChrome>
      </Popup>
    </Grid>
  </Border>
  <ControlTemplate.Triggers>
    <DataTrigger Binding="{Binding Path=ControlSizeDefinition.Width.IsStar, RelativeSource={RelativeSource Mode=Self}}" Value="True">
      <Setter Property="ColumnDefinition.Width" TargetName="TextColumn">
        <Setter.Value>
          <GridLength>*</GridLength>
        </Setter.Value>
      </Setter>
      <Setter Property="ColumnDefinition.Width" TargetName="OuterTextColumn">
        <Setter.Value>
          <GridLength>*</GridLength>
        </Setter.Value>
      </Setter>
      <Setter Property="FrameworkElement.Width" TargetName="PART_ContentHost">
        <Setter.Value>
          <s:Double>NaN</s:Double>
        </Setter.Value>
      </Setter>
      <Setter Property="FrameworkElement.HorizontalAlignment" TargetName="PART_ContentHost">
        <Setter.Value>
          <x:Static Member="HorizontalAlignment.Stretch" />
        </Setter.Value>
      </Setter>
      <Setter Property="FrameworkElement.HorizontalAlignment" TargetName="Grid">
        <Setter.Value>
          <x:Static Member="HorizontalAlignment.Stretch" />
        </Setter.Value>
      </Setter>
    </DataTrigger>
    <DataTrigger Binding="{Binding Path=ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Mode=Self}}" Value="Large">
      <Setter Property="FrameworkElement.MinWidth">
        <Setter.Value>
          <s:Double>44</s:Double>
        </Setter.Value>
      </Setter>
      <Setter Property="FrameworkElement.Height">
        <Setter.Value>
          <s:Double>66</s:Double>
        </Setter.Value>
      </Setter>
      <Setter Property="FrameworkElement.Height" TargetName="Image">
        <Setter.Value>
          <s:Double>32</s:Double>
        </Setter.Value>
      </Setter>
      <Setter Property="FrameworkElement.Width" TargetName="Image">
        <Setter.Value>
          <s:Double>32</s:Double>
        </Setter.Value>
      </Setter>
      <Setter Property="FrameworkElement.MinHeight" TargetName="Grid">
        <Setter.Value>
          <s:Double>26</s:Double>
        </Setter.Value>
      </Setter>
      <Setter Property="RibbonTwoLineText.HasTwoLines" TargetName="TwoLineText">
        <Setter.Value>
          <s:Boolean>True</s:Boolean>
        </Setter.Value>
      </Setter>
    </DataTrigger>
    <DataTrigger Binding="{Binding Path=ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Mode=Self}}" Value="Small">
      <Setter Property="FrameworkElement.Height">
        <Setter.Value>
          <s:Double>22</s:Double>
        </Setter.Value>
      </Setter>
      <Setter Property="Image.Source" TargetName="Image">
        <Setter.Value>
          <Binding Path="SmallImageSource" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
        </Setter.Value>
      </Setter>
      <Setter Property="FrameworkElement.Height" TargetName="Image">
        <Setter.Value>
          <s:Double>16</s:Double>
        </Setter.Value>
      </Setter>
      <Setter Property="FrameworkElement.Width" TargetName="Image">
        <Setter.Value>
          <s:Double>16</s:Double>
        </Setter.Value>
      </Setter>
      <Setter Property="FrameworkElement.HorizontalAlignment" TargetName="Image">
        <Setter.Value>
          <x:Static Member="HorizontalAlignment.Left" />
        </Setter.Value>
      </Setter>
      <Setter Property="FrameworkElement.Margin" TargetName="Image">
        <Setter.Value>
          <Thickness>2,0,1,0</Thickness>
        </Setter.Value>
      </Setter>
      <Setter Property="FrameworkElement.Margin" TargetName="TwoLineText">
        <Setter.Value>
          <Thickness>2,0,1,0</Thickness>
        </Setter.Value>
      </Setter>
      <Setter Property="RibbonTwoLineText.HasTwoLines" TargetName="TwoLineText">
        <Setter.Value>
          <s:Boolean>False</s:Boolean>
        </Setter.Value>
      </Setter>
      <Setter Property="Grid.Column" TargetName="Image">
        <Setter.Value>
          <s:Int32>0</s:Int32>
        </Setter.Value>
      </Setter>
      <Setter Property="Grid.Row" TargetName="Image">
        <Setter.Value>
          <s:Int32>1</s:Int32>
        </Setter.Value>
      </Setter>
    </DataTrigger>
    <DataTrigger Binding="{Binding Path=ControlSizeDefinition.ImageSize, RelativeSource={RelativeSource Mode=Self}}" Value="Collapsed">
      <Setter Property="UIElement.Visibility" TargetName="Image">
        <Setter.Value>
          <x:Static Member="Visibility.Collapsed" />
        </Setter.Value>
      </Setter>
    </DataTrigger>
    <DataTrigger Binding="{Binding Path=ControlSizeDefinition.IsLabelVisible, RelativeSource={RelativeSource Mode=Self}}" Value="False">
      <Setter Property="UIElement.Visibility" TargetName="TwoLineTextPanel">
        <Setter.Value>
          <x:Static Member="Visibility.Collapsed" />
        </Setter.Value>
      </Setter>
    </DataTrigger>
    <MultiDataTrigger>
      <MultiDataTrigger.Conditions>
        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
        <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True" />
      </MultiDataTrigger.Conditions>
      <Setter Property="Border.BorderBrush" TargetName="Border">
        <Setter.Value>
          <Binding Path="MouseOverBorderBrush" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
        </Setter.Value>
      </Setter>
      <Setter Property="Panel.Background" TargetName="Border">
        <Setter.Value>
          <Binding Path="MouseOverBackground" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
        </Setter.Value>
      </Setter>
      <Setter Property="Border.BorderBrush" TargetName="PART_ToggleButton">
        <Setter.Value>
          <Binding Path="MouseOverBorderBrush" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
        </Setter.Value>
      </Setter>
      <Setter Property="Panel.Background" TargetName="PART_ToggleButton">
        <Setter.Value>
          <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
            <LinearGradientBrush.GradientStops>
              <GradientStop Color="#FFE4F0FE" Offset="0" />
              <GradientStop Color="#FFE4F0FE" Offset="0.49" />
              <GradientStop Color="#FFCFDFF3" Offset="0.5" />
              <GradientStop Color="#FFE8F1FD" Offset="1" />
            </LinearGradientBrush.GradientStops>
          </LinearGradientBrush>
        </Setter.Value>
      </Setter>
    </MultiDataTrigger>
    <MultiDataTrigger>
      <MultiDataTrigger.Conditions>
        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
        <Condition Binding="{Binding Path=IsKeyboardFocused, ElementName=PART_ToggleButton}" Value="True" />
      </MultiDataTrigger.Conditions>
      <Setter Property="Panel.Background" TargetName="Border">
        <Setter.Value>
          <Binding Path="FocusedBackground" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
        </Setter.Value>
      </Setter>
      <Setter Property="Border.BorderBrush" TargetName="Border">
        <Setter.Value>
          <Binding Path="FocusedBorderBrush" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
        </Setter.Value>
      </Setter>
    </MultiDataTrigger>
    <Trigger Property="RibbonControlService.ShowKeyboardCues">
      <Setter Property="UIElement.Visibility" TargetName="FocusVisual">
        <Setter.Value>
          <x:Static Member="Visibility.Visible" />
        </Setter.Value>
      </Setter>
      <Trigger.Value>
        <s:Boolean>True</s:Boolean>
      </Trigger.Value>
    </Trigger>
    <Trigger Property="UIElement.IsEnabled">
      <Setter Property="UIElement.Opacity" TargetName="Image">
        <Setter.Value>
          <s:Double>0.5</s:Double>
        </Setter.Value>
      </Setter>
      <Setter Property="Panel.Background" TargetName="Border">
        <Setter.Value>
          <SolidColorBrush>#90DEDEDE</SolidColorBrush>
        </Setter.Value>
      </Setter>
      <Setter Property="Border.BorderBrush" TargetName="Border">
        <Setter.Value>
          <SolidColorBrush>#90B1BBC6</SolidColorBrush>
        </Setter.Value>
      </Setter>
      <Setter Property="TextElement.Foreground" TargetName="MainBorder">
        <Setter.Value>
          <SolidColorBrush>#FF9E9E9E</SolidColorBrush>
        </Setter.Value>
      </Setter>
      <Trigger.Value>
        <s:Boolean>False</s:Boolean>
      </Trigger.Value>
    </Trigger>
    <Trigger Property="RibbonControlService.IsInControlGroup">
      <Setter Property="Border.BorderBrush" TargetName="MainBorder">
        <Setter.Value>
          <Binding Path="Ribbon.BorderBrush" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
        </Setter.Value>
      </Setter>
      <Setter Property="Border.BorderThickness" TargetName="MainBorder">
        <Setter.Value>
          <Thickness>0,0,1,0</Thickness>
        </Setter.Value>
      </Setter>
      <Trigger.Value>
        <s:Boolean>True</s:Boolean>
      </Trigger.Value>
    </Trigger>
    <MultiTrigger>
      <MultiTrigger.Conditions>
        <Condition Property="RibbonMenuButton.CanUserResizeHorizontally">
          <Condition.Value>
            <s:Boolean>True</s:Boolean>
          </Condition.Value>
        </Condition>
        <Condition Property="RibbonMenuButton.CanUserResizeVertically">
          <Condition.Value>
            <s:Boolean>True</s:Boolean>
          </Condition.Value>
        </Condition>
      </MultiTrigger.Conditions>
      <Setter Property="UIElement.Visibility" TargetName="ResizeControl">
        <Setter.Value>
          <x:Static Member="Visibility.Visible" />
        </Setter.Value>
      </Setter>
    </MultiTrigger>
    <MultiTrigger>
      <MultiTrigger.Conditions>
        <Condition Property="RibbonMenuButton.CanUserResizeHorizontally">
          <Condition.Value>
            <s:Boolean>False</s:Boolean>
          </Condition.Value>
        </Condition>
        <Condition Property="RibbonMenuButton.CanUserResizeVertically">
          <Condition.Value>
            <s:Boolean>True</s:Boolean>
          </Condition.Value>
        </Condition>
      </MultiTrigger.Conditions>
      <Setter Property="UIElement.Visibility" TargetName="ResizeControl">
        <Setter.Value>
          <x:Static Member="Visibility.Visible" />
        </Setter.Value>
      </Setter>
      <Setter Property="FrameworkElement.Style" TargetName="PART_ResizeThumb">
        <Setter.Value>
          <Style TargetType="Thumb">
            <Style.Resources>
              <ResourceDictionary />
            </Style.Resources>
            <Setter Property="FrameworkElement.Height">
              <Setter.Value>
                <s:Double>11</s:Double>
              </Setter.Value>
            </Setter>
            <Setter Property="FrameworkElement.Cursor">
              <Setter.Value>
                <Cursor>SizeNS</Cursor>
              </Setter.Value>
            </Setter>
            <Setter Property="Control.Template">
              <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                  <Border Background="#00FFFFFF">
                    <Path Margin="0,0,2,2" HorizontalAlignment="Center" VerticalAlignment="Bottom">
                      <Path.Data>
                        <RectangleGeometry Rect="0,0,11,3" />
                      </Path.Data>
                      <Path.Fill>
                        <DrawingBrush ViewportUnits="Absolute" ViewboxUnits="Absolute" Viewport="0,0,3,3" Viewbox="0,0,3,3" TileMode="Tile">
                          <DrawingBrush.Drawing>
                            <DrawingGroup>
                              <DrawingGroup.Children>
                                <GeometryDrawing Brush="#FF6C747D" Geometry="M0,0L2,0 2,2 0,2z" />
                              </DrawingGroup.Children>
                            </DrawingGroup>
                          </DrawingBrush.Drawing>
                        </DrawingBrush>
                      </Path.Fill>
                    </Path>
                  </Border>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
          </Style>
        </Setter.Value>
      </Setter>
    </MultiTrigger>
    <Trigger Property="RibbonMenuButton.IsDropDownPositionedAbove">
      <Setter Property="Grid.Row" TargetName="ResizeControl">
        <Setter.Value>
          <s:Int32>0</s:Int32>
        </Setter.Value>
      </Setter>
      <Setter Property="Border.BorderThickness" TargetName="ResizeControl">
        <Setter.Value>
          <Thickness>0,0,0,1</Thickness>
        </Setter.Value>
      </Setter>
      <Trigger.Value>
        <s:Boolean>True</s:Boolean>
      </Trigger.Value>
    </Trigger>
    <MultiTrigger>
      <MultiTrigger.Conditions>
        <Condition Property="RibbonMenuButton.IsDropDownPositionedAbove">
          <Condition.Value>
            <s:Boolean>True</s:Boolean>
          </Condition.Value>
        </Condition>
        <Condition Property="RibbonMenuButton.CanUserResizeHorizontally">
          <Condition.Value>
            <s:Boolean>True</s:Boolean>
          </Condition.Value>
        </Condition>
        <Condition Property="RibbonMenuButton.CanUserResizeVertically">
          <Condition.Value>
            <s:Boolean>True</s:Boolean>
          </Condition.Value>
        </Condition>
      </MultiTrigger.Conditions>
      <Setter Property="FrameworkElement.Style" TargetName="PART_ResizeThumb">
        <Setter.Value>
          <Style TargetType="Thumb">
            <Style.Triggers>
              <Trigger Property="FrameworkElement.FlowDirection">
                <Setter Property="FrameworkElement.Cursor">
                  <Setter.Value>
                    <Cursor>SizeNWSE</Cursor>
                  </Setter.Value>
                </Setter>
                <Trigger.Value>
                  <x:Static Member="FlowDirection.RightToLeft" />
                </Trigger.Value>
              </Trigger>
            </Style.Triggers>
            <Style.Resources>
              <ResourceDictionary />
            </Style.Resources>
            <Setter Property="FrameworkElement.Width">
              <Setter.Value>
                <s:Double>11</s:Double>
              </Setter.Value>
            </Setter>
            <Setter Property="FrameworkElement.Height">
              <Setter.Value>
                <s:Double>11</s:Double>
              </Setter.Value>
            </Setter>
            <Setter Property="FrameworkElement.VerticalAlignment">
              <Setter.Value>
                <x:Static Member="VerticalAlignment.Top" />
              </Setter.Value>
            </Setter>
            <Setter Property="FrameworkElement.HorizontalAlignment">
              <Setter.Value>
                <x:Static Member="HorizontalAlignment.Right" />
              </Setter.Value>
            </Setter>
            <Setter Property="FrameworkElement.Cursor">
              <Setter.Value>
                <Cursor>SizeNESW</Cursor>
              </Setter.Value>
            </Setter>
            <Setter Property="Control.Template">
              <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                  <Border Background="#00FFFFFF">
                    <Path Data="M0,0L0,3 3,3 3,6 6,6 6,9 9,9 9,11 11,11 11,0z" Margin="0,2,2,0">
                      <Path.Fill>
                        <DrawingBrush ViewportUnits="Absolute" ViewboxUnits="Absolute" Viewport="0,0,3,3" Viewbox="0,0,3,3" TileMode="Tile">
                          <DrawingBrush.Drawing>
                            <DrawingGroup>
                              <DrawingGroup.Children>
                                <GeometryDrawing Brush="#FF6C747D" Geometry="M0,0L2,0 2,2 0,2z" />
                              </DrawingGroup.Children>
                            </DrawingGroup>
                          </DrawingBrush.Drawing>
                        </DrawingBrush>
                      </Path.Fill>
                    </Path>
                  </Border>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
          </Style>
        </Setter.Value>
      </Setter>
    </MultiTrigger>
    <Trigger Property="Popup.HasDropShadow" SourceName="PART_Popup">
      <Setter Property="FrameworkElement.Margin" TargetName="Shadow">
        <Setter.Value>
          <Thickness>0,0,5,5</Thickness>
        </Setter.Value>
      </Setter>
      <Setter Property="mwt:SystemDropShadowChrome.Color" TargetName="Shadow">
        <Setter.Value>
          <Color>#71000000</Color>
        </Setter.Value>
      </Setter>
      <Trigger.Value>
        <s:Boolean>True</s:Boolean>
      </Trigger.Value>
    </Trigger>
    <Trigger Property="Popup.IsOpen" SourceName="PART_Popup">
      <Setter Property="Popup.PopupAnimation" TargetName="PART_Popup">
        <Setter.Value>
          <x:Static Member="PopupAnimation.None" />
        </Setter.Value>
      </Setter>
      <Trigger.Value>
        <s:Boolean>False</s:Boolean>
      </Trigger.Value>
    </Trigger>
    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">
      <Setter Property="mwt:SystemDropShadowChrome.Color" TargetName="Shadow">
        <Setter.Value>
          <Color>#00FFFFFF</Color>
        </Setter.Value>
      </Setter>
      <Setter Property="Popup.PopupAnimation" TargetName="PART_Popup">
        <Setter.Value>
          <x:Static Member="PopupAnimation.None" />
        </Setter.Value>
      </Setter>
      <Setter Property="Border.BorderBrush" TargetName="MenuBorder">
        <Setter.Value>
          <DynamicResource ResourceKey="{x:Static SystemColors.ControlTextBrushKey}" />
        </Setter.Value>
      </Setter>
      <Setter Property="Panel.Background" TargetName="MenuBorder">
        <Setter.Value>
          <DynamicResource ResourceKey="{x:Static SystemColors.MenuBrushKey}" />
        </Setter.Value>
      </Setter>
      <Setter Property="Border.BorderBrush" TargetName="ResizeControl">
        <Setter.Value>
          <DynamicResource ResourceKey="{x:Static SystemColors.ControlTextBrushKey}" />
        </Setter.Value>
      </Setter>
      <Setter Property="Panel.Background" TargetName="ResizeControl">
        <Setter.Value>
          <DynamicResource ResourceKey="{x:Static SystemColors.MenuBrushKey}" />
        </Setter.Value>
      </Setter>
      <Setter Property="Panel.Background" TargetName="SubMenuInnerBorder">
        <Setter.Value>
          <SolidColorBrush>#00FFFFFF</SolidColorBrush>
        </Setter.Value>
      </Setter>
      <Setter Property="Panel.Background">
        <Setter.Value>
          <DynamicResource ResourceKey="{x:Static SystemColors.WindowBrushKey}" />
        </Setter.Value>
      </Setter>
      <Setter Property="Panel.Background" TargetName="Border">
        <Setter.Value>
          <SolidColorBrush>#00FFFFFF</SolidColorBrush>
        </Setter.Value>
      </Setter>
      <Setter Property="Border.BorderBrush" TargetName="Border">
        <Setter.Value>
          <DynamicResource ResourceKey="{x:Static SystemColors.ControlLightBrushKey}" />
        </Setter.Value>
      </Setter>
      <Setter Property="Shape.Stroke" TargetName="FocusVisual">
        <Setter.Value>
          <DynamicResource ResourceKey="{x:Static SystemColors.WindowFrameBrushKey}" />
        </Setter.Value>
      </Setter>
      <Setter Property="TextElement.Foreground" TargetName="MainBorder">
        <Setter.Value>
          <DynamicResource ResourceKey="{x:Static SystemColors.MenuTextBrushKey}" />
        </Setter.Value>
      </Setter>
    </DataTrigger>
    <MultiDataTrigger>
      <MultiDataTrigger.Conditions>
        <Condition Binding="{Binding Path=IsInControlGroup, RelativeSource={RelativeSource Mode=Self}}" Value="True" />
        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
      </MultiDataTrigger.Conditions>
      <Setter Property="Border.BorderBrush" TargetName="MainBorder">
        <Setter.Value>
          <DynamicResource ResourceKey="{x:Static SystemColors.ControlLightLightBrushKey}" />
        </Setter.Value>
      </Setter>
    </MultiDataTrigger>
    <MultiDataTrigger>
      <MultiDataTrigger.Conditions>
        <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="False" />
        <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
      </MultiDataTrigger.Conditions>
      <Setter Property="TextElement.Foreground" TargetName="MainBorder">
        <Setter.Value>
          <DynamicResource ResourceKey="{x:Static SystemColors.GrayTextBrushKey}" />
        </Setter.Value>
      </Setter>
    </MultiDataTrigger>
  </ControlTemplate.Triggers>
</ControlTemplate>